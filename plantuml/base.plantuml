@startuml layers
object NDB {
    // Node Database (NDB) Layer
}
object LTP {
    // Lists, Tables, and Properties (LTP) Layer
}
object Messaging {
    // Messaging Layer
}
NDB <|-- LTP
LTP <|-- Messaging

@enduml
@startuml schematic
title implementaion ideas of NDB part\n

class PstUtil {
    + PstStore openPst(ReadFile readFile)
}

interface PstStore {
    + PstNode getOneNodeBy(long nodeId)
    + boolean hasOneNodeBy(long nodeId)
}

interface PstNode {
    .. describe node itself ..
    + long getNodeId()

    .. tree traversal ..
    + PstNode getParent()
    + PstNode[] getChildren()

    .. sub tree traversal ..
    + PstSubNode getSubNode()
}

interface PstSubNode {
    .. describe node itself ..
    + long getNodeId()
    + boolean is4K()

    .. sub tree traversal ..
    + PstSubNode getChildBy(long childNodeId)

    .. data operations ..
    + byte[][] getData()
}

interface PstNodeBased {

}

interface SLBlockEntryBased {

}

PstUtil --* PstStore
PstUtil -- ReadFile
PstStore " 1 " --* " N " PstNode
PstNode -- PstSubNode
PstSubNode <|-- PstNodeBased
PstSubNode <|-- SLBlockEntryBased

interface ReadFile {
    + int readFile(byte[] buffer, long position, int length)
}

@enduml
@startuml ltp_heap
title modelling ideas of LTP part: node heap\n
class NodeHeapUtil {
    + NodeHeap getHeapFrom(PstSubNode node)
}

interface NodeHeap {
    - PstSubNode node
    + byte bClientSig
    + int userRootHNID

    + NodeHeapReader getReader()
}

interface NodeHeapReader {
    + byte[] getHeapBuffer(int hnid)
}

note as N1
    HNID:

    heapIndexOrChildNodeId

    - Zero if empty maybe.
    - If ((it & 31) != 0), it is a childNodeId.
    - Or else, ((it / 32) - 1) is a heapIndex.
end note

NodeHeapUtil --* NodeHeap
NodeHeap -- NodeHeapReader
@enduml
@startuml ltp_btheap
title modelling ideas of LTP part: btree heap\n
class BTHeapUtil {
    + BTHeapReader getBTHeapReaderFrom(NodeHeapReader heap, int hnid)
}

interface BTHeapReader {
    - NodeHeapReader heap

    + BTHeapEntry[] list()
}

class BTHeapEntry {
    + byte[] key   // 2, 4, 8 or 16 bytes
    + byte[] data   // 1 ~ 32 bytes
}


BTHeapUtil --* BTHeapReader
BTHeapReader --* BTHeapEntry

@enduml
@startuml ltp_pc
title modelling ideas of LTP part: property context\n
class PropertyContextUtil {
    // throw Exception if a heap bClientSig != bTypePC 0xBC

    + PropertyContext getPropertyContext(NodeHeap heap, PropertyValueResolver resolver)
}

interface PropertyContext {
    - NodeHeap heap
    - PropertyValueResolver resolver

    + RawProperty[] listRaw()
    + Property[] list()
}

interface PropertyValueResolver {
    + object resolveValueOf(int key, int type, byte[] value, NodeHeapReader heap)
}

class RawProperty {
    + int key
    + int type
    + byte[] value
}

class Property {
    + int key
    + int type
    + object value
}

PropertyContextUtil --* PropertyContext
PropertyContext --* Property
PropertyContext --* RawProperty
PropertyContextUtil -- PropertyValueResolver

legend
    <b>Some of property types:</b>

    |= Type |= Java type sample |
    | PT_BOOLEAN | boolean |
    | PT_SHORT | int |
    | PT_LONG | long |
    | PT_DOUBLE | double |
    | PT_STRING8 | String or byte[] |
    | PT_UNICODE | String |
    | PT_SYSTIME | Date |
    | PT_OBJECT | Object |

    <b>byte[] value (4 bytes, 32 bit, little endian, unsigned int):</b>

    value can represent direct value, for example:
    
    - It is INT8 about PT_BOOLEAN property.
    - It is INT32 about PT_LONG property.

    value may represent HNID in case of having:
    
    - variable length data like PT_STRING and PT_UNICODE
    - longer fixed data like PT_DOUBLE

    <b>PropertyValueResolver:</b>

    PropertyValueResolver is responsible to resolve raw byte array.

    It can use:

    - A byte array:
      - Always 4 bytes in PropertyContext. It can be casted up to int value.
      - Always 8 bytes in TableContext. It can be casted up to long value.
    - A NodeHeap: resolve HNID (convert byte[] value to int, and use it as HNID)
    
    Also resolve external factors, for example:
    
    - convert from ansi PT_STRING8 to unicode String
end legend

@enduml
@startuml ltp_tc
title modelling ideas of LTP part: table context\n
class TableContextUtil {
    // throw Exception if a heap bClientSig != bTypeTC 0x7C

    + TableContext getTableContext(NodeHeap heap, PropertyValueResolver resolver)
}

interface TableContext {
    - NodeHeap heap
    - PropertyValueResolver resolver

    + Row[] rows()
}

interface Row {
    + RawPropertyValue[] listRaw()
    + PropertyValue[] list()
}

interface PropertyValueResolver {
    + object resolveValueOf(int key, int type, byte[] value, NodeHeapReader heap)
}

class RawProperty {
    + int key
    + int type
    + byte[] value
}

class Property {
    + int key
    + int type
    + object value
}

TableContextUtil --* TableContext
TableContext --* Row
Row --* Property
Row --* RawProperty
TableContextUtil -- PropertyValueResolver

@enduml
